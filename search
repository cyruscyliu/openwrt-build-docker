#!/usr/bin/python
import os
import sys


def search(uuid):
    # maybe we don't support this firmware
    uuids = {}
    with open('machines.csv') as f:
        for line in f:
            uuid_supported, url = line.strip().split(',')
            uuids[uuid_supported] = url
    if uuid not in uuids:
        print('add this new firmware to machines.csv')
        exit(-1)

    # find its hash
    hash_of_image_builder, candidates = None, None
    url = uuids[uuid]
    print('{}\tdownload from\t{}'.format(uuid, url))
    openwrtver = url.split('/')[4]
    homepage = os.path.dirname(url)
    print('{}\thomepage is\t{}'.format(uuid, homepage))
    with open('image_builder.csv') as f:
        for line in f:
            items = line.strip().split(',')
            hash_of_image_builder = items[0]
            url_to_image_builder = items[1]
            candidates = items[2:]
            hp = os.path.dirname(url_to_image_builder)
            if hp == homepage:
                break
    candidates.remove(uuid)
    print('{}\ttogether with\t{}'.format(uuid, candidates))
    if hash_of_image_builder is None:
        print('add this new firmware to machines.csv')
        exit(-1)

    print('{}\tbuild at\tshare/{}-{}'.format(uuid, openwrtver, hash_of_image_builder))

    # find path to vmlinux and path to source code
    found = False
    with open('support_list.csv', 'r') as f:
        for line in f:
            h, vmlinux_debug_info, source_code, vmlinux, dot_config, makeout = line.strip().split(',')
            if h == hash_of_image_builder:
                found = True
                break

    binary = os.path.basename(url)
    build_at = 'share/{}-{}'.format(openwrtver, hash_of_image_builder)
    binary_results = os.popen('cd {} && find -name {}'.format(build_at, binary)).readlines()
        
    if found:
        print('{}\tsource code\t{}'.format(uuid, source_code))
        print('{}\tvmlinux.elf\t{}'.format(uuid, vmlinux))
        print('{}\twith symbols\t{}'.format(uuid, vmlinux_debug_info))
        print('{}\tand .config\t{}'.format(uuid, dot_config))
        print('{}\tand makeout.txt\t{}'.format(uuid, makeout))

    if len(binary_results):
        print('{}\tfirmware\t{}'.format(uuid, os.path.join(build_at, binary_results[0].strip())))


if __name__ == '__main__':
    if len(sys.argv) != 2:
        print('usage {} UUID'.format(sys.argv[0]))
        exit(-1)
    search(sys.argv[1])
