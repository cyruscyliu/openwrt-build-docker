#!/usr/bin/python
import os
import sys


def search(uuid, summary=False):
    info = []

    # maybe we don't support this firmware
    uuids = {}
    with open('machines.csv') as f:
        for line in f:
            uuid_supported, url = line.strip().split(',')
            uuids[uuid_supported] = url
    if uuid not in uuids:
        print('add this new firmware to machines.csv')
        exit(-1)
    if summary:
        info.append(uuid)

    # find its hash
    hash_of_image_builder, candidates = None, None
    url = uuids[uuid]
    if summary:
        info.append(url)
    else:
        print('{}\tdownload from\t{}'.format(uuid, url))

    openwrtver = url.split('/')[4]
    homepage = os.path.dirname(url)
    if summary:
        info.append(homepage)
    else:
        print('{}\thomepage is\t{}'.format(uuid, homepage))

    with open('image_builder.csv') as f:
        for line in f:
            items = line.strip().split(',')
            hash_of_image_builder = items[0]
            url_to_image_builder = items[1]
            candidates = items[2:]
            hp = os.path.dirname(url_to_image_builder)
            if hp == homepage:
                break
    candidates.remove(uuid)
    if summary:
        info.append('@'.join(candidates))
    else:
        print('{}\ttogether with\t{}'.format(uuid, candidates))

    if hash_of_image_builder is None:
        print('add this new firmware to machines.csv')
        exit(-1)

    build_at = "share/{}-{}".format(openwrtver, hash_of_image_builder)

    if summary:
        info.append(build_at)
    else:
        print('{}\tbuild at\t{}'.format(uuid, build_at))

    # find path to vmlinux and path to source code
    found = False
    with open('support_list.csv', 'r') as f:
        for line in f:
            h, vmlinux_debug_info, source_code, vmlinux, dot_config, makeout = line.strip().split(',')
            if h == hash_of_image_builder:
                found = True
                break

    binary = os.path.basename(url)
    binary_results = os.popen('cd {} && find -name {}'.format(build_at, binary)).readlines()
    gcc_results = os.popen('cd {} && find -name *-openwrt-linux-gcc'.format(build_at)).readlines()
    # summary !5, 10, 11
    

    if found:

        if summary:
            info.append(source_code)
            info.append(vmlinux)
            info.append(vmlinux_debug_info)
            info.append(dot_config)
            info.append(makeout)
        else:
            print('{}\tsource code\t{}'.format(uuid, source_code))
            print('{}\tvmlinux.elf\t{}'.format(uuid, vmlinux))
            print('{}\twith symbols\t{}'.format(uuid, vmlinux_debug_info))
            print('{}\tand .config\t{}'.format(uuid, dot_config))
            print('{}\tand makeout.txt\t{}'.format(uuid, makeout))
        # summary 5, !10, 11

        if len(binary_results):
            path_to_binary = os.path.join(build_at, binary_results[0].strip())
            if summary:
                info.append(path_to_binary)
            else:
                print('{}\tfirmware\t{}'.format(uuid, path_to_binary))
        # summary 5, 10, !11
            if len(gcc_results):
                path_to_gcc = os.path.join(build_at, gcc_results[0].strip())
                if summary:
                    info.append(path_to_gcc)
                else:
                    print('{}\tgcc\t{}'.format(uuid, path_to_gcc))
	    # summary 5, 10, 11, !12

    if summary:
        with open('summary/{}.summary'.format(uuid), 'w') as f:
            f.write(','.join(info))
        print('summary at summary/{}.summary'.format(uuid))


if __name__ == '__main__':
    summary = False 

    if len(sys.argv) == 2:
        uuid = sys.argv[1]
    elif len(sys.argv) == 3:
        if sys.argv[1] != '-s':
            print('usage {} [-s] UUID'.format(sys.argv[0]))
            exit(-1)
        summary = True
        uuid = sys.argv[2]
    else:
        print('usage {} [-s] UUID'.format(sys.argv[0]))
        exit(-1)

    search(uuid, summary=summary)
